from django.db import models

# Create your models here.
class OW_Team(models.Model):
	id = models.BigAutoField(primary_key=True)
	name = models.CharField(max_length=100)
	year_fall = models.IntegerField()
	year_spring = models.IntegerField()
	varsity = models.BooleanField()

class Roster(models.Model):
	id = models.BigAutoField(primary_key=True)
	ow_team_id = models.ForeignKey(OW_Team, on_delete=models.CASCADE)
	first_name = models.CharField(max_length=100)
	last_name = models.CharField(max_length=100)
	role = models.CharField(max_length=100)

class Match(models.Model):
	id = models.BigAutoField(primary_key=True)
	ow_team_id = models.ForeignKey(OW_Team, on_delete=models.CASCADE)
	match_type = models.CharField(max_length=100)
	opponent = models.CharField(max_length=100)
	mount_score = models.IntegerField()
	opponent_score = models.IntegerField()
	mount_win = models.BooleanField()

class Game(models.Model):
	id = models.BigAutoField(primary_key=True)
	match_id = models.ForeignKey(Match, on_delete=models.CASCADE)
	map_type = models.CharField(max_length=100)
	mount_score = models.IntegerField()
	opponent_score = models.IntegerField()
	mount_win = models.BooleanField()
	notes = models.TextField(null=True, blank=True)

class Control_Map(models.Model):
	id = models.BigAutoField(primary_key=True)
	game_id = models.ForeignKey(Game, on_delete=models.CASCADE)
	map_name = models.CharField(max_length=100) 
	map_sub_name = models.CharField(max_length=100)
	round = models.IntegerField()
	mount_tank = models.CharField(max_length=100)
	mount_dps_1 = models.CharField(max_length=100)
	mount_dps_2 = models.CharField(max_length=100)
	mount_support_1 = models.CharField(max_length=100)
	mount_support_2 = models.CharField(max_length=100)
	opponent_tank = models.CharField(max_length=100)
	opponent_dps_1 = models.CharField(max_length=100)
	opponent_dps_2 = models.CharField(max_length=100)
	opponent_support_1 = models.CharField(max_length=100)
	opponent_support_2 = models.CharField(max_length=100)
	mount_percent = models.IntegerField()
	opponent_percent = models.IntegerField()

class Escort_Hybrid_Map(models.Model):
	id = models.BigAutoField(primary_key=True)
	game_id = models.ForeignKey(Game, on_delete=models.CASCADE)
	is_Escort = models.BooleanField()
	map_name = models.CharField(max_length=100) 
	attack_first = models.BooleanField()
	mount_attack_tank = models.CharField(max_length=100)
	mount_attack_dps_1 = models.CharField(max_length=100)
	mount_attack_dps_2 = models.CharField(max_length=100)
	mount_attack_support_1 = models.CharField(max_length=100)
	mount_attack_support_2 = models.CharField(max_length=100)
	opponent_defense_tank = models.CharField(max_length=100)
	opponent_defense_dps_1 = models.CharField(max_length=100)
	opponent_defense_dps_2 = models.CharField(max_length=100)
	opponent_defense_support_1 = models.CharField(max_length=100)
	opponent_defense_support_2 = models.CharField(max_length=100)
	mount_defense_tank = models.CharField(max_length=100)
	mount_defense_dps_1 = models.CharField(max_length=100)
	mount_defense_dps_2 = models.CharField(max_length=100)
	mount_defense_support_1 = models.CharField(max_length=100)
	mount_defense_support_2 = models.CharField(max_length=100)
	opponent_attack_tank = models.CharField(max_length=100)
	opponent_attack_dps_1 = models.CharField(max_length=100)
	opponent_attack_dps_2 = models.CharField(max_length=100)
	opponent_attack_support_1 = models.CharField(max_length=100)
	opponent_attack_support_2 = models.CharField(max_length=100)

class Push_Map(models.Model):
	id = models.BigAutoField(primary_key=True)
	game_id = models.ForeignKey(Game, on_delete=models.CASCADE)
	map_name = models.CharField(max_length=100) 
	mount_distance = models.IntegerField()
	opponent_distance = models.IntegerField()
	mount_tank = models.CharField(max_length=100)
	mount_dps_1 = models.CharField(max_length=100)
	mount_dps_2 = models.CharField(max_length=100)
	mount_support_1 = models.CharField(max_length=100)
	mount_support_2 = models.CharField(max_length=100)
	opponent_tank = models.CharField(max_length=100)
	opponent_dps_1 = models.CharField(max_length=100)
	opponent_dps_2 = models.CharField(max_length=100)
	opponent_support_1 = models.CharField(max_length=100)
	opponent_support_2 = models.CharField(max_length=100)

class Flashpoint_Map(models.Model):
	id = models.BigAutoField(primary_key=True)
	game_id = models.ForeignKey(Game, on_delete=models.CASCADE)
	map_name = models.CharField(max_length=100) 
	point_number = models.IntegerField()
	mount_percent = models.IntegerField()
	opponent_percent = models.IntegerField()
	mount_tank = models.CharField(max_length=100)
	mount_dps_1 = models.CharField(max_length=100)
	mount_dps_2 = models.CharField(max_length=100)
	mount_support_1 = models.CharField(max_length=100)
	mount_support_2 = models.CharField(max_length=100)
	opponent_tank = models.CharField(max_length=100)
	opponent_dps_1 = models.CharField(max_length=100)
	opponent_dps_2 = models.CharField(max_length=100)
	opponent_support_1 = models.CharField(max_length=100)
	opponent_support_2 = models.CharField(max_length=100)

class Player(models.Model):
	id = models.BigAutoField(primary_key=True)
	roster_id = models.ForeignKey(Roster, on_delete=models.CASCADE)
	control_id = models.ForeignKey(Control_Map, on_delete=models.CASCADE, null=True, blank=True)
	push_id = models.ForeignKey(Push_Map, on_delete=models.CASCADE, null=True, blank=True)
	flashpoint_id = models.ForeignKey(Flashpoint_Map, on_delete=models.CASCADE, null=True, blank=True)
	escort_hybrid_id = models.ForeignKey(Escort_Hybrid_Map, on_delete=models.CASCADE, null=True, blank=True)
	role = models.CharField(max_length=100)
	hero = models.CharField(max_length=100)
	is_defense = models.BooleanField(default=False)
	kills = models.IntegerField(null=True, blank=True)
	deaths = models.IntegerField(null=True, blank=True)
	assists = models.IntegerField(null=True, blank=True)
	damage = models.IntegerField(null=True, blank=True)
	healing = models.IntegerField(null=True, blank=True)